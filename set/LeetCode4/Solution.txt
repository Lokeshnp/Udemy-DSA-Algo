public static int longestConsecutiveSequence(int[] nums) {
        Set<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            numSet.add(num);
        }

        int longestStreak = 0;

        for (int num : numSet) {
            if (!numSet.contains(num - 1)) {
                int currentNum = num;
                int currentStreak = 1;

                while (numSet.contains(currentNum + 1)) {
                    currentNum++;
                    currentStreak++;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;
    }




This code finds the length of the longest consecutive sequence of integers in an input array nums.



First, it creates a HashSet called numSet to store the unique elements from the input array nums. Duplicates are automatically removed by the HashSet.

It initializes a variable longestStreak to store the length of the longest consecutive sequence found so far. Initially, this is set to 0.

The code iterates through each number num in the numSet.

If numSet does not contain num - 1, it means that num is the start of a new consecutive sequence.

It initializes two variables: currentNum with the value of num and currentStreak with the value of 1.

A while loop checks if numSet contains the next number in the sequence (currentNum + 1). If it does, the loop increments currentNum and currentStreak. This loop continues until a consecutive number is not found in numSet.

After the while loop, longestStreak is updated to the maximum value between the current longestStreak and the currentStreak.

Once all numbers in numSet have been processed, the method returns the value of longestStreak, which represents the length of the longest consecutive sequence found in the input array nums.



Example:



Let's go through an example using the following input array nums:

nums = [100, 4, 200, 1, 3, 2]

The HashSet numSet will store the unique elements from nums:

numSet = {1, 2, 3, 4, 100, 200}


longestStreak is initialized to 0.



The code starts iterating through each number in numSet. Let's go step by step for each number:



num = 1: numSet does not contain 0 (1-1), so it starts a new consecutive sequence. The while loop increments currentNum to 2, 3, and 4 as they are all in numSet. The currentStreak becomes 4. longestStreak is updated to 4.

num = 2: numSet contains 1 (2-1), so it skips to the next iteration.

num = 3: numSet contains 2 (3-1), so it skips to the next iteration.

num = 4: numSet contains 3 (4-1), so it skips to the next iteration.

num = 100: numSet does not contain 99 (100-1), but there is no consecutive number in numSet greater than 100. The while loop does not execute, and longestStreak remains 4.

num = 200: numSet does not contain 199 (200-1), but there is no consecutive number in numSet greater than 200. The while loop does not execute, and longestStreak remains 4.



After iterating through all the numbers in numSet, the method returns the value of longestStreak, which is 4. This is the length of the longest consecutive sequence [1, 2, 3, 4] found in the input array nums.





Code with inline comments:



public static int longestConsecutiveSequence(int[] nums) {
    // Create a Set to store unique elements from nums
    Set<Integer> numSet = new HashSet<>();
    for (int num : nums) {
        numSet.add(num);
    }

    // Initialize the longest streak to 0
    int longestStreak = 0;

    // Iterate through each number in the Set
    for (int num : numSet) {
        // If the number is the start of a sequence
        if (!numSet.contains(num - 1)) {
            int currentNum = num;
            int currentStreak = 1;

            // Keep checking for the next numbers in the sequence
            while (numSet.contains(currentNum + 1)) {
                currentNum++;
                currentStreak++;
            }

            // Update the longest streak if a longer sequence is found
            longestStreak = Math.max(longestStreak, currentStreak);
        }
    }

    // Return the length of the longest consecutive sequence
    return longestStreak;
}