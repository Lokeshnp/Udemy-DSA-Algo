public static boolean hasUniqueChars(String string) {
        Set<Character> charSet = new HashSet<>();

        for (char ch : string.toCharArray()) {
            if (charSet.contains(ch)) {
                return false;
            }
            charSet.add(ch);
        }

        return true;
    }




The hasUniqueChars method takes a string as input and returns a boolean value indicating whether all the characters in the input string are unique or not.



A HashSet called charSet is created to store unique characters from the input string. The HashSet data structure ensures that there are no duplicate elements in the set.

The method iterates through each character ch in the input string by converting the string to a character array using the toCharArray() method.

For each character ch, the method checks if charSet contains the character already. If it does, it means the character is a duplicate and the method returns false.

If the character is not in the charSet, it is added to the set using the add() method.

After iterating through all characters in the string, if no duplicates were found, the method returns true, indicating that all characters in the input string are unique.





Code with inline comments:



    public static boolean hasUniqueChars(String string) {
        // Create a set to store unique characters
        Set<Character> charSet = new HashSet<>();

        // Iterate through each character in the string
        for (char ch : string.toCharArray()) {
            // Check if the character is already in the set
            if (charSet.contains(ch)) {
                return false;
            }
            // Add the character to the set
            charSet.add(ch);
        }

        // If no duplicates found, return true
        return true;
    }